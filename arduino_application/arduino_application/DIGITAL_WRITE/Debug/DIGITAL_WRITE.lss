
DIGITAL_WRITE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  000008f6  0000098a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a6  00800130  00800130  000009ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006898  00000000  00000000  00000cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011af  00000000  00000000  00007554  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f19  00000000  00000000  00008703  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000764  00000000  00000000  0000961c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001918  00000000  00000000  00009d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d68  00000000  00000000  0000b698  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000270  00000000  00000000  0000e400  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
   4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
   8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
   c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  10:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  14:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  18:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  1c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  20:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  24:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  28:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  2c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  30:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  34:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  38:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  3c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  40:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__vector_16>
  44:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  48:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__vector_18>
  4c:	0c 94 12 02 	jmp	0x424	; 0x424 <__vector_19>
  50:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  54:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  58:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  5c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  60:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  64:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
  a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
  ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
  b8:	42 02       	muls	r20, r18

000000ba <__ctors_end>:
  ba:	11 24       	eor	r1, r1
  bc:	1f be       	out	0x3f, r1	; 63
  be:	cf ef       	ldi	r28, 0xFF	; 255
  c0:	d8 e0       	ldi	r29, 0x08	; 8
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
  c6:	11 e0       	ldi	r17, 0x01	; 1
  c8:	a0 e0       	ldi	r26, 0x00	; 0
  ca:	b1 e0       	ldi	r27, 0x01	; 1
  cc:	e6 ef       	ldi	r30, 0xF6	; 246
  ce:	f8 e0       	ldi	r31, 0x08	; 8
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <__do_copy_data+0x10>
  d2:	05 90       	lpm	r0, Z+
  d4:	0d 92       	st	X+, r0
  d6:	a0 33       	cpi	r26, 0x30	; 48
  d8:	b1 07       	cpc	r27, r17
  da:	d9 f7       	brne	.-10     	; 0xd2 <__do_copy_data+0xc>

000000dc <__do_clear_bss>:
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	a0 e3       	ldi	r26, 0x30	; 48
  e0:	b1 e0       	ldi	r27, 0x01	; 1
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
  e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
  e6:	a6 3d       	cpi	r26, 0xD6	; 214
  e8:	b2 07       	cpc	r27, r18
  ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>

000000ec <__do_global_ctors>:
  ec:	10 e0       	ldi	r17, 0x00	; 0
  ee:	cd e5       	ldi	r28, 0x5D	; 93
  f0:	d0 e0       	ldi	r29, 0x00	; 0
  f2:	04 c0       	rjmp	.+8      	; 0xfc <__do_global_ctors+0x10>
  f4:	21 97       	sbiw	r28, 0x01	; 1
  f6:	fe 01       	movw	r30, r28
  f8:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__tablejump2__>
  fc:	cc 35       	cpi	r28, 0x5C	; 92
  fe:	d1 07       	cpc	r29, r17
 100:	c9 f7       	brne	.-14     	; 0xf4 <__do_global_ctors+0x8>
 102:	0e 94 70 02 	call	0x4e0	; 0x4e0 <main>
 106:	0c 94 79 04 	jmp	0x8f2	; 0x8f2 <_exit>

0000010a <__bad_interrupt>:
 10a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010e <setup>:
//End of Auto generated function prototypes by Atmel Studio

unsigned int pin13=13;
void setup() {
  // put your setup code here, to run once:
  pinMode(pin13, OUTPUT);
 10e:	61 e0       	ldi	r22, 0x01	; 1
 110:	80 91 00 01 	lds	r24, 0x0100
 114:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 118:	26 e0       	ldi	r18, 0x06	; 6
 11a:	40 e8       	ldi	r20, 0x80	; 128
 11c:	55 e2       	ldi	r21, 0x25	; 37
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	80 e3       	ldi	r24, 0x30	; 48
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <_ZN14HardwareSerial5beginEmh>

0000012a <loop>:
  Serial.begin(9600);
}

void loop() {
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
  // put your main code here, to run repeatedly:

  digitalWrite(pin13, HIGH);
 12e:	c0 e0       	ldi	r28, 0x00	; 0
 130:	d1 e0       	ldi	r29, 0x01	; 1
 132:	61 e0       	ldi	r22, 0x01	; 1
 134:	88 81       	ld	r24, Y
 136:	0e 94 20 04 	call	0x840	; 0x840 <digitalWrite>
  delay(1000);
 13a:	68 ee       	ldi	r22, 0xE8	; 232
 13c:	73 e0       	ldi	r23, 0x03	; 3
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 44 03 	call	0x688	; 0x688 <delay>
    digitalWrite(pin13, LOW);
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	88 81       	ld	r24, Y
 14a:	0e 94 20 04 	call	0x840	; 0x840 <digitalWrite>
    delay(1000);
 14e:	68 ee       	ldi	r22, 0xE8	; 232
 150:	73 e0       	ldi	r23, 0x03	; 3
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 44 03 	call	0x688	; 0x688 <delay>
    Serial.println("Hello World");
 15a:	62 e0       	ldi	r22, 0x02	; 2
 15c:	71 e0       	ldi	r23, 0x01	; 1
 15e:	80 e3       	ldi	r24, 0x30	; 48
 160:	91 e0       	ldi	r25, 0x01	; 1
}
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28

  digitalWrite(pin13, HIGH);
  delay(1000);
    digitalWrite(pin13, LOW);
    delay(1000);
    Serial.println("Hello World");
 166:	0c 94 c3 02 	jmp	0x586	; 0x586 <_ZN5Print7printlnEPKc>

0000016a <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 16a:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 16c:	91 8d       	ldd	r25, Z+25	; 0x19
 16e:	22 8d       	ldd	r18, Z+26	; 0x1a
 170:	89 2f       	mov	r24, r25
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	80 5c       	subi	r24, 0xC0	; 192
 176:	9f 4f       	sbci	r25, 0xFF	; 255
 178:	82 1b       	sub	r24, r18
 17a:	91 09       	sbc	r25, r1
}
 17c:	8f 73       	andi	r24, 0x3F	; 63
 17e:	99 27       	eor	r25, r25
 180:	08 95       	ret

00000182 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 182:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 184:	91 8d       	ldd	r25, Z+25	; 0x19
 186:	82 8d       	ldd	r24, Z+26	; 0x1a
 188:	98 17       	cp	r25, r24
 18a:	31 f0       	breq	.+12     	; 0x198 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 18c:	82 8d       	ldd	r24, Z+26	; 0x1a
 18e:	e8 0f       	add	r30, r24
 190:	f1 1d       	adc	r31, r1
 192:	85 8d       	ldd	r24, Z+29	; 0x1d
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 198:	8f ef       	ldi	r24, 0xFF	; 255
 19a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 19c:	08 95       	ret

0000019e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 19e:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 1a0:	91 8d       	ldd	r25, Z+25	; 0x19
 1a2:	82 8d       	ldd	r24, Z+26	; 0x1a
 1a4:	98 17       	cp	r25, r24
 1a6:	61 f0       	breq	.+24     	; 0x1c0 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 1a8:	82 8d       	ldd	r24, Z+26	; 0x1a
 1aa:	df 01       	movw	r26, r30
 1ac:	a8 0f       	add	r26, r24
 1ae:	b1 1d       	adc	r27, r1
 1b0:	5d 96       	adiw	r26, 0x1d	; 29
 1b2:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 1b4:	92 8d       	ldd	r25, Z+26	; 0x1a
 1b6:	9f 5f       	subi	r25, 0xFF	; 255
 1b8:	9f 73       	andi	r25, 0x3F	; 63
 1ba:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 1c0:	8f ef       	ldi	r24, 0xFF	; 255
 1c2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 1c4:	08 95       	ret

000001c6 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 1c6:	88 e3       	ldi	r24, 0x38	; 56
 1c8:	92 e0       	ldi	r25, 0x02	; 2
 1ca:	89 2b       	or	r24, r25
 1cc:	49 f0       	breq	.+18     	; 0x1e0 <_Z14serialEventRunv+0x1a>
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	89 2b       	or	r24, r25
 1d4:	29 f0       	breq	.+10     	; 0x1e0 <_Z14serialEventRunv+0x1a>
 1d6:	0e 94 38 02 	call	0x470	; 0x470 <_Z17Serial0_availablev>
 1da:	81 11       	cpse	r24, r1
 1dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 1e0:	08 95       	ret

000001e2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 1e2:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 1e4:	84 8d       	ldd	r24, Z+28	; 0x1c
 1e6:	df 01       	movw	r26, r30
 1e8:	a8 0f       	add	r26, r24
 1ea:	b1 1d       	adc	r27, r1
 1ec:	a3 5a       	subi	r26, 0xA3	; 163
 1ee:	bf 4f       	sbci	r27, 0xFF	; 255
 1f0:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 1f2:	84 8d       	ldd	r24, Z+28	; 0x1c
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	01 96       	adiw	r24, 0x01	; 1
 1f8:	8f 73       	andi	r24, 0x3F	; 63
 1fa:	99 27       	eor	r25, r25
 1fc:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 1fe:	a6 89       	ldd	r26, Z+22	; 0x16
 200:	b7 89       	ldd	r27, Z+23	; 0x17
 202:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 204:	a0 89       	ldd	r26, Z+16	; 0x10
 206:	b1 89       	ldd	r27, Z+17	; 0x11
 208:	8c 91       	ld	r24, X
 20a:	80 64       	ori	r24, 0x40	; 64
 20c:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 20e:	93 8d       	ldd	r25, Z+27	; 0x1b
 210:	84 8d       	ldd	r24, Z+28	; 0x1c
 212:	98 13       	cpse	r25, r24
 214:	06 c0       	rjmp	.+12     	; 0x222 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 216:	02 88       	ldd	r0, Z+18	; 0x12
 218:	f3 89       	ldd	r31, Z+19	; 0x13
 21a:	e0 2d       	mov	r30, r0
 21c:	80 81       	ld	r24, Z
 21e:	8f 7d       	andi	r24, 0xDF	; 223
 220:	80 83       	st	Z, r24
 222:	08 95       	ret

00000224 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
 228:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 22a:	88 8d       	ldd	r24, Y+24	; 0x18
 22c:	88 23       	and	r24, r24
 22e:	c9 f0       	breq	.+50     	; 0x262 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 230:	ea 89       	ldd	r30, Y+18	; 0x12
 232:	fb 89       	ldd	r31, Y+19	; 0x13
 234:	80 81       	ld	r24, Z
 236:	85 fd       	sbrc	r24, 5
 238:	05 c0       	rjmp	.+10     	; 0x244 <_ZN14HardwareSerial5flushEv+0x20>
 23a:	a8 89       	ldd	r26, Y+16	; 0x10
 23c:	b9 89       	ldd	r27, Y+17	; 0x11
 23e:	8c 91       	ld	r24, X
 240:	86 fd       	sbrc	r24, 6
 242:	0f c0       	rjmp	.+30     	; 0x262 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	07 fc       	sbrc	r0, 7
 248:	f5 cf       	rjmp	.-22     	; 0x234 <_ZN14HardwareSerial5flushEv+0x10>
 24a:	80 81       	ld	r24, Z
 24c:	85 ff       	sbrs	r24, 5
 24e:	f2 cf       	rjmp	.-28     	; 0x234 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 250:	a8 89       	ldd	r26, Y+16	; 0x10
 252:	b9 89       	ldd	r27, Y+17	; 0x11
 254:	8c 91       	ld	r24, X
 256:	85 ff       	sbrs	r24, 5
 258:	ed cf       	rjmp	.-38     	; 0x234 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 25a:	ce 01       	movw	r24, r28
 25c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 260:	e7 cf       	rjmp	.-50     	; 0x230 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	08 95       	ret

00000268 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
 268:	ef 92       	push	r14
 26a:	ff 92       	push	r15
 26c:	0f 93       	push	r16
 26e:	1f 93       	push	r17
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	ec 01       	movw	r28, r24
  _written = true;
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 27a:	9b 8d       	ldd	r25, Y+27	; 0x1b
 27c:	8c 8d       	ldd	r24, Y+28	; 0x1c
 27e:	98 13       	cpse	r25, r24
 280:	05 c0       	rjmp	.+10     	; 0x28c <_ZN14HardwareSerial5writeEh+0x24>
 282:	e8 89       	ldd	r30, Y+16	; 0x10
 284:	f9 89       	ldd	r31, Y+17	; 0x11
 286:	80 81       	ld	r24, Z
 288:	85 fd       	sbrc	r24, 5
 28a:	24 c0       	rjmp	.+72     	; 0x2d4 <_ZN14HardwareSerial5writeEh+0x6c>
 28c:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 28e:	0b 8d       	ldd	r16, Y+27	; 0x1b
 290:	10 e0       	ldi	r17, 0x00	; 0
 292:	0f 5f       	subi	r16, 0xFF	; 255
 294:	1f 4f       	sbci	r17, 0xFF	; 255
 296:	0f 73       	andi	r16, 0x3F	; 63
 298:	11 27       	eor	r17, r17
 29a:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 29c:	8c 8d       	ldd	r24, Y+28	; 0x1c
 29e:	e8 12       	cpse	r14, r24
 2a0:	0c c0       	rjmp	.+24     	; 0x2ba <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 2a2:	0f b6       	in	r0, 0x3f	; 63
 2a4:	07 fc       	sbrc	r0, 7
 2a6:	fa cf       	rjmp	.-12     	; 0x29c <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 2a8:	e8 89       	ldd	r30, Y+16	; 0x10
 2aa:	f9 89       	ldd	r31, Y+17	; 0x11
 2ac:	80 81       	ld	r24, Z
 2ae:	85 ff       	sbrs	r24, 5
 2b0:	f5 cf       	rjmp	.-22     	; 0x29c <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 2b2:	ce 01       	movw	r24, r28
 2b4:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 2b8:	f1 cf       	rjmp	.-30     	; 0x29c <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 2ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
 2bc:	fe 01       	movw	r30, r28
 2be:	e8 0f       	add	r30, r24
 2c0:	f1 1d       	adc	r31, r1
 2c2:	e3 5a       	subi	r30, 0xA3	; 163
 2c4:	ff 4f       	sbci	r31, 0xFF	; 255
 2c6:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 2c8:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 2ca:	ea 89       	ldd	r30, Y+18	; 0x12
 2cc:	fb 89       	ldd	r31, Y+19	; 0x13
 2ce:	80 81       	ld	r24, Z
 2d0:	80 62       	ori	r24, 0x20	; 32
 2d2:	07 c0       	rjmp	.+14     	; 0x2e2 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 2d4:	ee 89       	ldd	r30, Y+22	; 0x16
 2d6:	ff 89       	ldd	r31, Y+23	; 0x17
 2d8:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 2da:	e8 89       	ldd	r30, Y+16	; 0x10
 2dc:	f9 89       	ldd	r31, Y+17	; 0x11
 2de:	80 81       	ld	r24, Z
 2e0:	80 64       	ori	r24, 0x40	; 64
 2e2:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	df 91       	pop	r29
 2ea:	cf 91       	pop	r28
 2ec:	1f 91       	pop	r17
 2ee:	0f 91       	pop	r16
 2f0:	ff 90       	pop	r15
 2f2:	ef 90       	pop	r14
 2f4:	08 95       	ret

000002f6 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 2f6:	cf 92       	push	r12
 2f8:	df 92       	push	r13
 2fa:	ef 92       	push	r14
 2fc:	ff 92       	push	r15
 2fe:	1f 93       	push	r17
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	ec 01       	movw	r28, r24
 306:	6a 01       	movw	r12, r20
 308:	7b 01       	movw	r14, r22
 30a:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 30c:	e8 89       	ldd	r30, Y+16	; 0x10
 30e:	f9 89       	ldd	r31, Y+17	; 0x11
 310:	82 e0       	ldi	r24, 0x02	; 2
 312:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 314:	41 15       	cp	r20, r1
 316:	51 4e       	sbci	r21, 0xE1	; 225
 318:	61 05       	cpc	r22, r1
 31a:	71 05       	cpc	r23, r1
 31c:	b1 f0       	breq	.+44     	; 0x34a <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 31e:	60 e0       	ldi	r22, 0x00	; 0
 320:	79 e0       	ldi	r23, 0x09	; 9
 322:	8d e3       	ldi	r24, 0x3D	; 61
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	a7 01       	movw	r20, r14
 328:	96 01       	movw	r18, r12
 32a:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__udivmodsi4>
 32e:	da 01       	movw	r26, r20
 330:	c9 01       	movw	r24, r18
 332:	01 97       	sbiw	r24, 0x01	; 1
 334:	a1 09       	sbc	r26, r1
 336:	b1 09       	sbc	r27, r1
 338:	b6 95       	lsr	r27
 33a:	a7 95       	ror	r26
 33c:	97 95       	ror	r25
 33e:	87 95       	ror	r24
 340:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 342:	41 15       	cp	r20, r1
 344:	80 e1       	ldi	r24, 0x10	; 16
 346:	58 07       	cpc	r21, r24
 348:	a8 f0       	brcs	.+42     	; 0x374 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
 34a:	e8 89       	ldd	r30, Y+16	; 0x10
 34c:	f9 89       	ldd	r31, Y+17	; 0x11
 34e:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 350:	60 e8       	ldi	r22, 0x80	; 128
 352:	74 e8       	ldi	r23, 0x84	; 132
 354:	8e e1       	ldi	r24, 0x1E	; 30
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	a7 01       	movw	r20, r14
 35a:	96 01       	movw	r18, r12
 35c:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__udivmodsi4>
 360:	ba 01       	movw	r22, r20
 362:	a9 01       	movw	r20, r18
 364:	41 50       	subi	r20, 0x01	; 1
 366:	51 09       	sbc	r21, r1
 368:	61 09       	sbc	r22, r1
 36a:	71 09       	sbc	r23, r1
 36c:	76 95       	lsr	r23
 36e:	67 95       	ror	r22
 370:	57 95       	ror	r21
 372:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 374:	ec 85       	ldd	r30, Y+12	; 0x0c
 376:	fd 85       	ldd	r31, Y+13	; 0x0d
 378:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
 37a:	ee 85       	ldd	r30, Y+14	; 0x0e
 37c:	ff 85       	ldd	r31, Y+15	; 0x0f
 37e:	40 83       	st	Z, r20

  _written = false;
 380:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 382:	ec 89       	ldd	r30, Y+20	; 0x14
 384:	fd 89       	ldd	r31, Y+21	; 0x15
 386:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 388:	ea 89       	ldd	r30, Y+18	; 0x12
 38a:	fb 89       	ldd	r31, Y+19	; 0x13
 38c:	80 81       	ld	r24, Z
 38e:	80 61       	ori	r24, 0x10	; 16
 390:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 392:	ea 89       	ldd	r30, Y+18	; 0x12
 394:	fb 89       	ldd	r31, Y+19	; 0x13
 396:	80 81       	ld	r24, Z
 398:	88 60       	ori	r24, 0x08	; 8
 39a:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 39c:	ea 89       	ldd	r30, Y+18	; 0x12
 39e:	fb 89       	ldd	r31, Y+19	; 0x13
 3a0:	80 81       	ld	r24, Z
 3a2:	80 68       	ori	r24, 0x80	; 128
 3a4:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 3a6:	ea 89       	ldd	r30, Y+18	; 0x12
 3a8:	fb 89       	ldd	r31, Y+19	; 0x13
 3aa:	80 81       	ld	r24, Z
 3ac:	8f 7d       	andi	r24, 0xDF	; 223
 3ae:	80 83       	st	Z, r24
}
 3b0:	df 91       	pop	r29
 3b2:	cf 91       	pop	r28
 3b4:	1f 91       	pop	r17
 3b6:	ff 90       	pop	r15
 3b8:	ef 90       	pop	r14
 3ba:	df 90       	pop	r13
 3bc:	cf 90       	pop	r12
 3be:	08 95       	ret

000003c0 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 3c0:	1f 92       	push	r1
 3c2:	0f 92       	push	r0
 3c4:	0f b6       	in	r0, 0x3f	; 63
 3c6:	0f 92       	push	r0
 3c8:	11 24       	eor	r1, r1
 3ca:	2f 93       	push	r18
 3cc:	8f 93       	push	r24
 3ce:	9f 93       	push	r25
 3d0:	ef 93       	push	r30
 3d2:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 3d4:	e0 91 40 01 	lds	r30, 0x0140
 3d8:	f0 91 41 01 	lds	r31, 0x0141
 3dc:	80 81       	ld	r24, Z
 3de:	e0 91 46 01 	lds	r30, 0x0146
 3e2:	f0 91 47 01 	lds	r31, 0x0147
 3e6:	82 fd       	sbrc	r24, 2
 3e8:	12 c0       	rjmp	.+36     	; 0x40e <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 3ea:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 3ec:	80 91 49 01 	lds	r24, 0x0149
 3f0:	8f 5f       	subi	r24, 0xFF	; 255
 3f2:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 3f4:	20 91 4a 01 	lds	r18, 0x014A
 3f8:	82 17       	cp	r24, r18
 3fa:	51 f0       	breq	.+20     	; 0x410 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 3fc:	e0 91 49 01 	lds	r30, 0x0149
 400:	f0 e0       	ldi	r31, 0x00	; 0
 402:	e0 5d       	subi	r30, 0xD0	; 208
 404:	fe 4f       	sbci	r31, 0xFE	; 254
 406:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 408:	80 93 49 01 	sts	0x0149, r24
 40c:	01 c0       	rjmp	.+2      	; 0x410 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 40e:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 410:	ff 91       	pop	r31
 412:	ef 91       	pop	r30
 414:	9f 91       	pop	r25
 416:	8f 91       	pop	r24
 418:	2f 91       	pop	r18
 41a:	0f 90       	pop	r0
 41c:	0f be       	out	0x3f, r0	; 63
 41e:	0f 90       	pop	r0
 420:	1f 90       	pop	r1
 422:	18 95       	reti

00000424 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 424:	1f 92       	push	r1
 426:	0f 92       	push	r0
 428:	0f b6       	in	r0, 0x3f	; 63
 42a:	0f 92       	push	r0
 42c:	11 24       	eor	r1, r1
 42e:	2f 93       	push	r18
 430:	3f 93       	push	r19
 432:	4f 93       	push	r20
 434:	5f 93       	push	r21
 436:	6f 93       	push	r22
 438:	7f 93       	push	r23
 43a:	8f 93       	push	r24
 43c:	9f 93       	push	r25
 43e:	af 93       	push	r26
 440:	bf 93       	push	r27
 442:	ef 93       	push	r30
 444:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 446:	80 e3       	ldi	r24, 0x30	; 48
 448:	91 e0       	ldi	r25, 0x01	; 1
 44a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 44e:	ff 91       	pop	r31
 450:	ef 91       	pop	r30
 452:	bf 91       	pop	r27
 454:	af 91       	pop	r26
 456:	9f 91       	pop	r25
 458:	8f 91       	pop	r24
 45a:	7f 91       	pop	r23
 45c:	6f 91       	pop	r22
 45e:	5f 91       	pop	r21
 460:	4f 91       	pop	r20
 462:	3f 91       	pop	r19
 464:	2f 91       	pop	r18
 466:	0f 90       	pop	r0
 468:	0f be       	out	0x3f, r0	; 63
 46a:	0f 90       	pop	r0
 46c:	1f 90       	pop	r1
 46e:	18 95       	reti

00000470 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 470:	80 e3       	ldi	r24, 0x30	; 48
 472:	91 e0       	ldi	r25, 0x01	; 1
 474:	0e 94 b5 00 	call	0x16a	; 0x16a <_ZN14HardwareSerial9availableEv>
 478:	21 e0       	ldi	r18, 0x01	; 1
 47a:	89 2b       	or	r24, r25
 47c:	09 f4       	brne	.+2      	; 0x480 <_Z17Serial0_availablev+0x10>
 47e:	20 e0       	ldi	r18, 0x00	; 0
}
 480:	82 2f       	mov	r24, r18
 482:	08 95       	ret

00000484 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 484:	e0 e3       	ldi	r30, 0x30	; 48
 486:	f1 e0       	ldi	r31, 0x01	; 1
 488:	13 82       	std	Z+3, r1	; 0x03
 48a:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 48c:	88 ee       	ldi	r24, 0xE8	; 232
 48e:	93 e0       	ldi	r25, 0x03	; 3
 490:	a0 e0       	ldi	r26, 0x00	; 0
 492:	b0 e0       	ldi	r27, 0x00	; 0
 494:	84 83       	std	Z+4, r24	; 0x04
 496:	95 83       	std	Z+5, r25	; 0x05
 498:	a6 83       	std	Z+6, r26	; 0x06
 49a:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 49c:	82 e1       	ldi	r24, 0x12	; 18
 49e:	91 e0       	ldi	r25, 0x01	; 1
 4a0:	91 83       	std	Z+1, r25	; 0x01
 4a2:	80 83       	st	Z, r24
 4a4:	85 ec       	ldi	r24, 0xC5	; 197
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	95 87       	std	Z+13, r25	; 0x0d
 4aa:	84 87       	std	Z+12, r24	; 0x0c
 4ac:	84 ec       	ldi	r24, 0xC4	; 196
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	97 87       	std	Z+15, r25	; 0x0f
 4b2:	86 87       	std	Z+14, r24	; 0x0e
 4b4:	80 ec       	ldi	r24, 0xC0	; 192
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	91 8b       	std	Z+17, r25	; 0x11
 4ba:	80 8b       	std	Z+16, r24	; 0x10
 4bc:	81 ec       	ldi	r24, 0xC1	; 193
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	93 8b       	std	Z+19, r25	; 0x13
 4c2:	82 8b       	std	Z+18, r24	; 0x12
 4c4:	82 ec       	ldi	r24, 0xC2	; 194
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	95 8b       	std	Z+21, r25	; 0x15
 4ca:	84 8b       	std	Z+20, r24	; 0x14
 4cc:	86 ec       	ldi	r24, 0xC6	; 198
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	97 8b       	std	Z+23, r25	; 0x17
 4d2:	86 8b       	std	Z+22, r24	; 0x16
 4d4:	11 8e       	std	Z+25, r1	; 0x19
 4d6:	12 8e       	std	Z+26, r1	; 0x1a
 4d8:	13 8e       	std	Z+27, r1	; 0x1b
 4da:	14 8e       	std	Z+28, r1	; 0x1c
 4dc:	08 95       	ret

000004de <initVariant>:
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
 4de:	08 95       	ret

000004e0 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 4e0:	0e 94 80 03 	call	0x700	; 0x700 <init>

	initVariant();
 4e4:	0e 94 6f 02 	call	0x4de	; 0x4de <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 4e8:	0e 94 87 00 	call	0x10e	; 0x10e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 4ec:	c3 ee       	ldi	r28, 0xE3	; 227
 4ee:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 4f0:	0e 94 95 00 	call	0x12a	; 0x12a <loop>
		if (serialEventRun) serialEventRun();
 4f4:	20 97       	sbiw	r28, 0x00	; 0
 4f6:	e1 f3       	breq	.-8      	; 0x4f0 <main+0x10>
 4f8:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Z14serialEventRunv>
 4fc:	f9 cf       	rjmp	.-14     	; 0x4f0 <main+0x10>

000004fe <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 4fe:	cf 92       	push	r12
 500:	df 92       	push	r13
 502:	ef 92       	push	r14
 504:	ff 92       	push	r15
 506:	0f 93       	push	r16
 508:	1f 93       	push	r17
 50a:	cf 93       	push	r28
 50c:	df 93       	push	r29
 50e:	6c 01       	movw	r12, r24
 510:	7a 01       	movw	r14, r20
 512:	8b 01       	movw	r16, r22
  size_t n = 0;
 514:	c0 e0       	ldi	r28, 0x00	; 0
 516:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
 518:	ce 15       	cp	r28, r14
 51a:	df 05       	cpc	r29, r15
 51c:	89 f0       	breq	.+34     	; 0x540 <_ZN5Print5writeEPKhj+0x42>
    if (write(*buffer++)) n++;
 51e:	d8 01       	movw	r26, r16
 520:	6d 91       	ld	r22, X+
 522:	8d 01       	movw	r16, r26
 524:	d6 01       	movw	r26, r12
 526:	ed 91       	ld	r30, X+
 528:	fc 91       	ld	r31, X
 52a:	01 90       	ld	r0, Z+
 52c:	f0 81       	ld	r31, Z
 52e:	e0 2d       	mov	r30, r0
 530:	c6 01       	movw	r24, r12
 532:	09 95       	icall
 534:	89 2b       	or	r24, r25
 536:	11 f4       	brne	.+4      	; 0x53c <_ZN5Print5writeEPKhj+0x3e>
 538:	7e 01       	movw	r14, r28
 53a:	02 c0       	rjmp	.+4      	; 0x540 <_ZN5Print5writeEPKhj+0x42>
 53c:	21 96       	adiw	r28, 0x01	; 1
 53e:	ec cf       	rjmp	.-40     	; 0x518 <_ZN5Print5writeEPKhj+0x1a>
    else break;
  }
  return n;
}
 540:	c7 01       	movw	r24, r14
 542:	df 91       	pop	r29
 544:	cf 91       	pop	r28
 546:	1f 91       	pop	r17
 548:	0f 91       	pop	r16
 54a:	ff 90       	pop	r15
 54c:	ef 90       	pop	r14
 54e:	df 90       	pop	r13
 550:	cf 90       	pop	r12
 552:	08 95       	ret

00000554 <_ZN5Print5writeEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 554:	61 15       	cp	r22, r1
 556:	71 05       	cpc	r23, r1
 558:	79 f0       	breq	.+30     	; 0x578 <_ZN5Print5writeEPKc+0x24>
      return write((const uint8_t *)str, strlen(str));
 55a:	fb 01       	movw	r30, r22
 55c:	01 90       	ld	r0, Z+
 55e:	00 20       	and	r0, r0
 560:	e9 f7       	brne	.-6      	; 0x55c <_ZN5Print5writeEPKc+0x8>
 562:	31 97       	sbiw	r30, 0x01	; 1
 564:	af 01       	movw	r20, r30
 566:	46 1b       	sub	r20, r22
 568:	57 0b       	sbc	r21, r23
 56a:	dc 01       	movw	r26, r24
 56c:	ed 91       	ld	r30, X+
 56e:	fc 91       	ld	r31, X
 570:	02 80       	ldd	r0, Z+2	; 0x02
 572:	f3 81       	ldd	r31, Z+3	; 0x03
 574:	e0 2d       	mov	r30, r0
 576:	09 94       	ijmp
    }
 578:	80 e0       	ldi	r24, 0x00	; 0
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	08 95       	ret

0000057e <_ZN5Print7printlnEv>:
  return x.printTo(*this);
}

size_t Print::println(void)
{
  return write("\r\n");
 57e:	6e e1       	ldi	r22, 0x1E	; 30
 580:	71 e0       	ldi	r23, 0x01	; 1
 582:	0c 94 aa 02 	jmp	0x554	; 0x554 <_ZN5Print5writeEPKc>

00000586 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
 586:	0f 93       	push	r16
 588:	1f 93       	push	r17
 58a:	cf 93       	push	r28
 58c:	df 93       	push	r29
 58e:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
 590:	0e 94 aa 02 	call	0x554	; 0x554 <_ZN5Print5writeEPKc>
 594:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 596:	ce 01       	movw	r24, r28
 598:	0e 94 bf 02 	call	0x57e	; 0x57e <_ZN5Print7printlnEv>
  return n;
}
 59c:	80 0f       	add	r24, r16
 59e:	91 1f       	adc	r25, r17
 5a0:	df 91       	pop	r29
 5a2:	cf 91       	pop	r28
 5a4:	1f 91       	pop	r17
 5a6:	0f 91       	pop	r16
 5a8:	08 95       	ret

000005aa <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 5aa:	1f 92       	push	r1
 5ac:	0f 92       	push	r0
 5ae:	0f b6       	in	r0, 0x3f	; 63
 5b0:	0f 92       	push	r0
 5b2:	11 24       	eor	r1, r1
 5b4:	2f 93       	push	r18
 5b6:	3f 93       	push	r19
 5b8:	8f 93       	push	r24
 5ba:	9f 93       	push	r25
 5bc:	af 93       	push	r26
 5be:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 5c0:	80 91 ce 01 	lds	r24, 0x01CE
 5c4:	90 91 cf 01 	lds	r25, 0x01CF
 5c8:	a0 91 d0 01 	lds	r26, 0x01D0
 5cc:	b0 91 d1 01 	lds	r27, 0x01D1
	unsigned char f = timer0_fract;
 5d0:	30 91 cd 01 	lds	r19, 0x01CD

	m += MILLIS_INC;
	f += FRACT_INC;
 5d4:	23 e0       	ldi	r18, 0x03	; 3
 5d6:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
 5d8:	2d 37       	cpi	r18, 0x7D	; 125
 5da:	20 f4       	brcc	.+8      	; 0x5e4 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
 5dc:	01 96       	adiw	r24, 0x01	; 1
 5de:	a1 1d       	adc	r26, r1
 5e0:	b1 1d       	adc	r27, r1
 5e2:	05 c0       	rjmp	.+10     	; 0x5ee <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 5e4:	26 e8       	ldi	r18, 0x86	; 134
 5e6:	23 0f       	add	r18, r19
		m += 1;
 5e8:	02 96       	adiw	r24, 0x02	; 2
 5ea:	a1 1d       	adc	r26, r1
 5ec:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 5ee:	20 93 cd 01 	sts	0x01CD, r18
	timer0_millis = m;
 5f2:	80 93 ce 01 	sts	0x01CE, r24
 5f6:	90 93 cf 01 	sts	0x01CF, r25
 5fa:	a0 93 d0 01 	sts	0x01D0, r26
 5fe:	b0 93 d1 01 	sts	0x01D1, r27
	timer0_overflow_count++;
 602:	80 91 d2 01 	lds	r24, 0x01D2
 606:	90 91 d3 01 	lds	r25, 0x01D3
 60a:	a0 91 d4 01 	lds	r26, 0x01D4
 60e:	b0 91 d5 01 	lds	r27, 0x01D5
 612:	01 96       	adiw	r24, 0x01	; 1
 614:	a1 1d       	adc	r26, r1
 616:	b1 1d       	adc	r27, r1
 618:	80 93 d2 01 	sts	0x01D2, r24
 61c:	90 93 d3 01 	sts	0x01D3, r25
 620:	a0 93 d4 01 	sts	0x01D4, r26
 624:	b0 93 d5 01 	sts	0x01D5, r27
}
 628:	bf 91       	pop	r27
 62a:	af 91       	pop	r26
 62c:	9f 91       	pop	r25
 62e:	8f 91       	pop	r24
 630:	3f 91       	pop	r19
 632:	2f 91       	pop	r18
 634:	0f 90       	pop	r0
 636:	0f be       	out	0x3f, r0	; 63
 638:	0f 90       	pop	r0
 63a:	1f 90       	pop	r1
 63c:	18 95       	reti

0000063e <micros>:
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 63e:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
 640:	f8 94       	cli
	m = timer0_overflow_count;
 642:	80 91 d2 01 	lds	r24, 0x01D2
 646:	90 91 d3 01 	lds	r25, 0x01D3
 64a:	a0 91 d4 01 	lds	r26, 0x01D4
 64e:	b0 91 d5 01 	lds	r27, 0x01D5
#if defined(TCNT0)
	t = TCNT0;
 652:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 654:	a8 9b       	sbis	0x15, 0	; 21
 656:	05 c0       	rjmp	.+10     	; 0x662 <micros+0x24>
 658:	2f 3f       	cpi	r18, 0xFF	; 255
 65a:	19 f0       	breq	.+6      	; 0x662 <micros+0x24>
		m++;
 65c:	01 96       	adiw	r24, 0x01	; 1
 65e:	a1 1d       	adc	r26, r1
 660:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 662:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
 664:	ba 2f       	mov	r27, r26
 666:	a9 2f       	mov	r26, r25
 668:	98 2f       	mov	r25, r24
 66a:	88 27       	eor	r24, r24
 66c:	82 0f       	add	r24, r18
 66e:	91 1d       	adc	r25, r1
 670:	a1 1d       	adc	r26, r1
 672:	b1 1d       	adc	r27, r1
 674:	bc 01       	movw	r22, r24
 676:	cd 01       	movw	r24, r26
 678:	42 e0       	ldi	r20, 0x02	; 2
 67a:	66 0f       	add	r22, r22
 67c:	77 1f       	adc	r23, r23
 67e:	88 1f       	adc	r24, r24
 680:	99 1f       	adc	r25, r25
 682:	4a 95       	dec	r20
 684:	d1 f7       	brne	.-12     	; 0x67a <micros+0x3c>
}
 686:	08 95       	ret

00000688 <delay>:

void delay(unsigned long ms)
{
 688:	8f 92       	push	r8
 68a:	9f 92       	push	r9
 68c:	af 92       	push	r10
 68e:	bf 92       	push	r11
 690:	cf 92       	push	r12
 692:	df 92       	push	r13
 694:	ef 92       	push	r14
 696:	ff 92       	push	r15
 698:	6b 01       	movw	r12, r22
 69a:	7c 01       	movw	r14, r24
	uint32_t start = micros();
 69c:	0e 94 1f 03 	call	0x63e	; 0x63e <micros>
 6a0:	4b 01       	movw	r8, r22
 6a2:	5c 01       	movw	r10, r24

	while (ms > 0) {
 6a4:	c1 14       	cp	r12, r1
 6a6:	d1 04       	cpc	r13, r1
 6a8:	e1 04       	cpc	r14, r1
 6aa:	f1 04       	cpc	r15, r1
 6ac:	01 f1       	breq	.+64     	; 0x6ee <delay+0x66>
		yield();
 6ae:	0e 94 50 04 	call	0x8a0	; 0x8a0 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
 6b2:	0e 94 1f 03 	call	0x63e	; 0x63e <micros>
 6b6:	dc 01       	movw	r26, r24
 6b8:	cb 01       	movw	r24, r22
 6ba:	88 19       	sub	r24, r8
 6bc:	99 09       	sbc	r25, r9
 6be:	aa 09       	sbc	r26, r10
 6c0:	bb 09       	sbc	r27, r11
 6c2:	88 3e       	cpi	r24, 0xE8	; 232
 6c4:	93 40       	sbci	r25, 0x03	; 3
 6c6:	a1 05       	cpc	r26, r1
 6c8:	b1 05       	cpc	r27, r1
 6ca:	60 f3       	brcs	.-40     	; 0x6a4 <delay+0x1c>
			ms--;
 6cc:	21 e0       	ldi	r18, 0x01	; 1
 6ce:	c2 1a       	sub	r12, r18
 6d0:	d1 08       	sbc	r13, r1
 6d2:	e1 08       	sbc	r14, r1
 6d4:	f1 08       	sbc	r15, r1
			start += 1000;
 6d6:	88 ee       	ldi	r24, 0xE8	; 232
 6d8:	88 0e       	add	r8, r24
 6da:	83 e0       	ldi	r24, 0x03	; 3
 6dc:	98 1e       	adc	r9, r24
 6de:	a1 1c       	adc	r10, r1
 6e0:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
 6e2:	c1 14       	cp	r12, r1
 6e4:	d1 04       	cpc	r13, r1
 6e6:	e1 04       	cpc	r14, r1
 6e8:	f1 04       	cpc	r15, r1
 6ea:	19 f7       	brne	.-58     	; 0x6b2 <delay+0x2a>
 6ec:	db cf       	rjmp	.-74     	; 0x6a4 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
 6ee:	ff 90       	pop	r15
 6f0:	ef 90       	pop	r14
 6f2:	df 90       	pop	r13
 6f4:	cf 90       	pop	r12
 6f6:	bf 90       	pop	r11
 6f8:	af 90       	pop	r10
 6fa:	9f 90       	pop	r9
 6fc:	8f 90       	pop	r8
 6fe:	08 95       	ret

00000700 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 700:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 702:	84 b5       	in	r24, 0x24	; 36
 704:	82 60       	ori	r24, 0x02	; 2
 706:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 708:	84 b5       	in	r24, 0x24	; 36
 70a:	81 60       	ori	r24, 0x01	; 1
 70c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 70e:	85 b5       	in	r24, 0x25	; 37
 710:	82 60       	ori	r24, 0x02	; 2
 712:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 714:	85 b5       	in	r24, 0x25	; 37
 716:	81 60       	ori	r24, 0x01	; 1
 718:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 71a:	ee e6       	ldi	r30, 0x6E	; 110
 71c:	f0 e0       	ldi	r31, 0x00	; 0
 71e:	80 81       	ld	r24, Z
 720:	81 60       	ori	r24, 0x01	; 1
 722:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 724:	e1 e8       	ldi	r30, 0x81	; 129
 726:	f0 e0       	ldi	r31, 0x00	; 0
 728:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 72a:	80 81       	ld	r24, Z
 72c:	82 60       	ori	r24, 0x02	; 2
 72e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 730:	80 81       	ld	r24, Z
 732:	81 60       	ori	r24, 0x01	; 1
 734:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 736:	e0 e8       	ldi	r30, 0x80	; 128
 738:	f0 e0       	ldi	r31, 0x00	; 0
 73a:	80 81       	ld	r24, Z
 73c:	81 60       	ori	r24, 0x01	; 1
 73e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 740:	e1 eb       	ldi	r30, 0xB1	; 177
 742:	f0 e0       	ldi	r31, 0x00	; 0
 744:	80 81       	ld	r24, Z
 746:	84 60       	ori	r24, 0x04	; 4
 748:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 74a:	e0 eb       	ldi	r30, 0xB0	; 176
 74c:	f0 e0       	ldi	r31, 0x00	; 0
 74e:	80 81       	ld	r24, Z
 750:	81 60       	ori	r24, 0x01	; 1
 752:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 754:	ea e7       	ldi	r30, 0x7A	; 122
 756:	f0 e0       	ldi	r31, 0x00	; 0
 758:	80 81       	ld	r24, Z
 75a:	84 60       	ori	r24, 0x04	; 4
 75c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 75e:	80 81       	ld	r24, Z
 760:	82 60       	ori	r24, 0x02	; 2
 762:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 764:	80 81       	ld	r24, Z
 766:	81 60       	ori	r24, 0x01	; 1
 768:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 76a:	80 81       	ld	r24, Z
 76c:	80 68       	ori	r24, 0x80	; 128
 76e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 770:	10 92 c1 00 	sts	0x00C1, r1
 774:	08 95       	ret

00000776 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 776:	83 30       	cpi	r24, 0x03	; 3
 778:	81 f0       	breq	.+32     	; 0x79a <turnOffPWM+0x24>
 77a:	28 f4       	brcc	.+10     	; 0x786 <turnOffPWM+0x10>
 77c:	81 30       	cpi	r24, 0x01	; 1
 77e:	99 f0       	breq	.+38     	; 0x7a6 <turnOffPWM+0x30>
 780:	82 30       	cpi	r24, 0x02	; 2
 782:	a1 f0       	breq	.+40     	; 0x7ac <turnOffPWM+0x36>
 784:	08 95       	ret
 786:	87 30       	cpi	r24, 0x07	; 7
 788:	a9 f0       	breq	.+42     	; 0x7b4 <turnOffPWM+0x3e>
 78a:	88 30       	cpi	r24, 0x08	; 8
 78c:	b9 f0       	breq	.+46     	; 0x7bc <turnOffPWM+0x46>
 78e:	84 30       	cpi	r24, 0x04	; 4
 790:	d1 f4       	brne	.+52     	; 0x7c6 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 792:	80 91 80 00 	lds	r24, 0x0080
 796:	8f 7d       	andi	r24, 0xDF	; 223
 798:	03 c0       	rjmp	.+6      	; 0x7a0 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 79a:	80 91 80 00 	lds	r24, 0x0080
 79e:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 7a0:	80 93 80 00 	sts	0x0080, r24
 7a4:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 7a6:	84 b5       	in	r24, 0x24	; 36
 7a8:	8f 77       	andi	r24, 0x7F	; 127
 7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 7ac:	84 b5       	in	r24, 0x24	; 36
 7ae:	8f 7d       	andi	r24, 0xDF	; 223
 7b0:	84 bd       	out	0x24, r24	; 36
 7b2:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 7b4:	80 91 b0 00 	lds	r24, 0x00B0
 7b8:	8f 77       	andi	r24, 0x7F	; 127
 7ba:	03 c0       	rjmp	.+6      	; 0x7c2 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 7bc:	80 91 b0 00 	lds	r24, 0x00B0
 7c0:	8f 7d       	andi	r24, 0xDF	; 223
 7c2:	80 93 b0 00 	sts	0x00B0, r24
 7c6:	08 95       	ret

000007c8 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 7c8:	cf 93       	push	r28
 7ca:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	fc 01       	movw	r30, r24
 7d0:	e4 58       	subi	r30, 0x84	; 132
 7d2:	ff 4f       	sbci	r31, 0xFF	; 255
 7d4:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 7d6:	fc 01       	movw	r30, r24
 7d8:	e0 57       	subi	r30, 0x70	; 112
 7da:	ff 4f       	sbci	r31, 0xFF	; 255
 7dc:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 7de:	88 23       	and	r24, r24
 7e0:	61 f1       	breq	.+88     	; 0x83a <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	88 0f       	add	r24, r24
 7e6:	99 1f       	adc	r25, r25
 7e8:	fc 01       	movw	r30, r24
 7ea:	e2 55       	subi	r30, 0x52	; 82
 7ec:	ff 4f       	sbci	r31, 0xFF	; 255
 7ee:	c5 91       	lpm	r28, Z+
 7f0:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 7f2:	fc 01       	movw	r30, r24
 7f4:	ec 55       	subi	r30, 0x5C	; 92
 7f6:	ff 4f       	sbci	r31, 0xFF	; 255
 7f8:	a5 91       	lpm	r26, Z+
 7fa:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 7fc:	61 11       	cpse	r22, r1
 7fe:	09 c0       	rjmp	.+18     	; 0x812 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 800:	9f b7       	in	r25, 0x3f	; 63
                cli();
 802:	f8 94       	cli
		*reg &= ~bit;
 804:	88 81       	ld	r24, Y
 806:	20 95       	com	r18
 808:	82 23       	and	r24, r18
 80a:	88 83       	st	Y, r24
		*out &= ~bit;
 80c:	ec 91       	ld	r30, X
 80e:	2e 23       	and	r18, r30
 810:	0b c0       	rjmp	.+22     	; 0x828 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 812:	62 30       	cpi	r22, 0x02	; 2
 814:	61 f4       	brne	.+24     	; 0x82e <pinMode+0x66>
		uint8_t oldSREG = SREG;
 816:	9f b7       	in	r25, 0x3f	; 63
                cli();
 818:	f8 94       	cli
		*reg &= ~bit;
 81a:	38 81       	ld	r19, Y
 81c:	82 2f       	mov	r24, r18
 81e:	80 95       	com	r24
 820:	83 23       	and	r24, r19
 822:	88 83       	st	Y, r24
		*out |= bit;
 824:	ec 91       	ld	r30, X
 826:	2e 2b       	or	r18, r30
 828:	2c 93       	st	X, r18
		SREG = oldSREG;
 82a:	9f bf       	out	0x3f, r25	; 63
 82c:	06 c0       	rjmp	.+12     	; 0x83a <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 82e:	8f b7       	in	r24, 0x3f	; 63
                cli();
 830:	f8 94       	cli
		*reg |= bit;
 832:	e8 81       	ld	r30, Y
 834:	2e 2b       	or	r18, r30
 836:	28 83       	st	Y, r18
		SREG = oldSREG;
 838:	8f bf       	out	0x3f, r24	; 63
	}
}
 83a:	df 91       	pop	r29
 83c:	cf 91       	pop	r28
 83e:	08 95       	ret

00000840 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 840:	1f 93       	push	r17
 842:	cf 93       	push	r28
 844:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 846:	28 2f       	mov	r18, r24
 848:	30 e0       	ldi	r19, 0x00	; 0
 84a:	f9 01       	movw	r30, r18
 84c:	e8 59       	subi	r30, 0x98	; 152
 84e:	ff 4f       	sbci	r31, 0xFF	; 255
 850:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 852:	f9 01       	movw	r30, r18
 854:	e4 58       	subi	r30, 0x84	; 132
 856:	ff 4f       	sbci	r31, 0xFF	; 255
 858:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 85a:	f9 01       	movw	r30, r18
 85c:	e0 57       	subi	r30, 0x70	; 112
 85e:	ff 4f       	sbci	r31, 0xFF	; 255
 860:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 862:	cc 23       	and	r28, r28
 864:	c9 f0       	breq	.+50     	; 0x898 <digitalWrite+0x58>
 866:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 868:	81 11       	cpse	r24, r1
 86a:	0e 94 bb 03 	call	0x776	; 0x776 <turnOffPWM>

	out = portOutputRegister(port);
 86e:	ec 2f       	mov	r30, r28
 870:	f0 e0       	ldi	r31, 0x00	; 0
 872:	ee 0f       	add	r30, r30
 874:	ff 1f       	adc	r31, r31
 876:	ec 55       	subi	r30, 0x5C	; 92
 878:	ff 4f       	sbci	r31, 0xFF	; 255
 87a:	a5 91       	lpm	r26, Z+
 87c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 87e:	8f b7       	in	r24, 0x3f	; 63
	cli();
 880:	f8 94       	cli

	if (val == LOW) {
 882:	11 11       	cpse	r17, r1
 884:	05 c0       	rjmp	.+10     	; 0x890 <digitalWrite+0x50>
		*out &= ~bit;
 886:	9c 91       	ld	r25, X
 888:	ed 2f       	mov	r30, r29
 88a:	e0 95       	com	r30
 88c:	e9 23       	and	r30, r25
 88e:	02 c0       	rjmp	.+4      	; 0x894 <digitalWrite+0x54>
	} else {
		*out |= bit;
 890:	ec 91       	ld	r30, X
 892:	ed 2b       	or	r30, r29
 894:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
 896:	8f bf       	out	0x3f, r24	; 63
}
 898:	df 91       	pop	r29
 89a:	cf 91       	pop	r28
 89c:	1f 91       	pop	r17
 89e:	08 95       	ret

000008a0 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 8a0:	08 95       	ret

000008a2 <__udivmodsi4>:
 8a2:	a1 e2       	ldi	r26, 0x21	; 33
 8a4:	1a 2e       	mov	r1, r26
 8a6:	aa 1b       	sub	r26, r26
 8a8:	bb 1b       	sub	r27, r27
 8aa:	fd 01       	movw	r30, r26
 8ac:	0d c0       	rjmp	.+26     	; 0x8c8 <__udivmodsi4_ep>

000008ae <__udivmodsi4_loop>:
 8ae:	aa 1f       	adc	r26, r26
 8b0:	bb 1f       	adc	r27, r27
 8b2:	ee 1f       	adc	r30, r30
 8b4:	ff 1f       	adc	r31, r31
 8b6:	a2 17       	cp	r26, r18
 8b8:	b3 07       	cpc	r27, r19
 8ba:	e4 07       	cpc	r30, r20
 8bc:	f5 07       	cpc	r31, r21
 8be:	20 f0       	brcs	.+8      	; 0x8c8 <__udivmodsi4_ep>
 8c0:	a2 1b       	sub	r26, r18
 8c2:	b3 0b       	sbc	r27, r19
 8c4:	e4 0b       	sbc	r30, r20
 8c6:	f5 0b       	sbc	r31, r21

000008c8 <__udivmodsi4_ep>:
 8c8:	66 1f       	adc	r22, r22
 8ca:	77 1f       	adc	r23, r23
 8cc:	88 1f       	adc	r24, r24
 8ce:	99 1f       	adc	r25, r25
 8d0:	1a 94       	dec	r1
 8d2:	69 f7       	brne	.-38     	; 0x8ae <__udivmodsi4_loop>
 8d4:	60 95       	com	r22
 8d6:	70 95       	com	r23
 8d8:	80 95       	com	r24
 8da:	90 95       	com	r25
 8dc:	9b 01       	movw	r18, r22
 8de:	ac 01       	movw	r20, r24
 8e0:	bd 01       	movw	r22, r26
 8e2:	cf 01       	movw	r24, r30
 8e4:	08 95       	ret

000008e6 <__tablejump2__>:
 8e6:	ee 0f       	add	r30, r30
 8e8:	ff 1f       	adc	r31, r31
 8ea:	05 90       	lpm	r0, Z+
 8ec:	f4 91       	lpm	r31, Z
 8ee:	e0 2d       	mov	r30, r0
 8f0:	09 94       	ijmp

000008f2 <_exit>:
 8f2:	f8 94       	cli

000008f4 <__stop_program>:
 8f4:	ff cf       	rjmp	.-2      	; 0x8f4 <__stop_program>
